# -*- mode: org; coding: utf-8; -*-

* Default option
#+BEGIN_SRC emacs-lisp
(setq default-directory "~")

;; inihibit cl warning
(setq byte-compile-warnings '(cl-functions))

(setq inhibit-splash-screen t) 
;; Go straight to scratch buffer on startup
(setq inhibit-startup-message t)

;; Changes all yes/no questions to y/n type
(fset 'yes-or-no-p 'y-or-n-p)

;; shell scripts
(setq-default sh-basic-offset 2)
(setq-default sh-indentation 2)

;; No need for ~ files when editing
(setq create-lockfiles nil)

;; Don't show native OS scroll bars for buffers because they're redundant
(when (fboundp 'scroll-bar-mode)
  (scroll-bar-mode -1))

;; disable the toolbar
(tool-bar-mode -1)

;; disable menu on startup
(menu-bar-mode -1)

(global-visual-line-mode)  ;; word-wrap
(setq backup-inhibited t)

;; No cursor blinking
(blink-cursor-mode 0)
#+END_SRC

* Korean language environment
#+BEGIN_SRC emacs-lisp
(global-set-key [(shift space)] 'toggle-input-method)
(set-language-environment "Korean")
(prefer-coding-system 'utf-8)
(setq default-korean-keyboard "3f")
#+END_SRC

* Font setup
#+BEGIN_SRC emacs-lisp
(defun my-font-setup ()
  "Setup English font and harmoning Korean font"
  (add-to-list 'default-frame-alist '(font . "Source Code Pro-10"))
  (set-face-font 'default "Source Code Pro-10")
  ;(add-to-list 'default-frame-alist '(font . "Fira Code-10"))
  ;(set-face-font 'default "Fira Code-10")
  ;(add-to-list 'default-frame-alist '(font . "Ubuntu Mono-11"))
  ;(set-face-font 'default "Ubuntu Mono-11")
  ;(add-to-list 'default-frame-alist '(font . "Monaco-10"))
  ;(set-face-font 'default "Monaco-10")

  (set-fontset-font "fontset-default" '(#x1100 . #xffdc)
                    '("HCR Dotum" . "iso10646-1"))
  (set-fontset-font "fontset-default" '(#xe0bc . #xf66e)
                    '("HCR Dotum" . "iso10646-1"))
  (setq face-font-rescale-alist '((".*HCR.*" . 1.1))))

(my-font-setup)
(add-hook 'sever-switch-hook (my-font-setup))
#+END_SRC

* Custom lisp file path setup
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/.emacs.d/lisp")
;(load "~/.emacs.d/lisp/my-abbrev.el")
;(require 'diatheke)
#+END_SRC

* Package management setup
#+BEGIN_SRC emacs-lisp
(require 'package)
(setq package-archives
      '(("gnu" . "http://elpa.gnu.org/packages/")
        ("melpa-stable" . "http://stable.melpa.org/packages/")
        ("melpa". "http://melpa.org/packages/")))
(package-initialize)

(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
(require 'use-package)

(require 'use-package-ensure)
(setq use-package-always-ensure t)
#+END_SRC

* UI
** color theme
#+BEGIN_SRC emacs-lisp
;(add-to-list 'custom-theme-load-path "~/.emacs.d/themes/")
(use-package atom-one-dark-theme)
(use-package gruvbox-theme)
(use-package solarized-theme)

(load-theme 'gruvbox t)
;(load-theme 'gruvbox-light-soft t)
;(load-theme 'atom-one-dark t)
;(load-theme 'solarized-dark t)
#+END_SRC


** Powerline
#+BEGIN_SRC emacs-lisp
(use-package powerline
  :init
  (setq powerline-default-separator 'wave)
  :config
  (powerline-center-theme))
#+END_SRC

* Navigation: 
** uniquify, recentf
#+BEGIN_SRC emacs-lisp
;; Emacs gives the buffers distinct names when several buffers visit identically-named files.
(require 'uniquify)
(setq uniquify-buffer-name-style 'forward)

;; turn on recent file mode
(setq recentf-save-file (concat user-emacs-directory ".recentf"))
(require 'recentf)
(recentf-mode 1)
(setq recentf-max-menu-items 40)
#+END_SRC

** ido
#+BEGIN_SRC emacs-lisp
(use-package ido-completing-read+
  :bind ("C-x C-b" . ibuffer)
  :init
  ;; This allows partial matches, e.g. "tl" will match "Tyrion Lannister"
  (setq ido-enable-flex-matching t)

  ;; Turn this behavior off because it's annoying
  (setq ido-use-filename-at-point nil)

  ;; Don't try to match file across all "work" directories; only match files
  ;; in the current directory displayed in the minibuffer
  (setq ido-auto-merge-work-directories-length -1)

  ;; Includes buffer names of recently open files, even if they're not
  ;; open now
  (setq ido-use-virtual-buffers t)

  :config
  (ido-mode t)
  ;; This enables ido in all contexts where it could be useful, not just
  ;; for selecting buffer and file names
  (ido-ubiquitous-mode t)
  (ido-everywhere t))
#+END_SRC


** smex
#+BEGIN_SRC emacs-lisp
;; Enhances M-x to allow easier execution of commands. 
(use-package smex
  :bind ("M-x" . smex)
  :init
  (setq smex-save-file (concat user-emacs-directory ".smex-items"))
  :config
  (smex-initialize))
#+END_SRC


** projectile
#+BEGIN_SRC emacs-lisp
(use-package projectile)
(projectile-mode +1)
(define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
(define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
(projectile-global-mode)
#+END_SRC

** ace-jump-mode
#+BEGIN_SRC emacs-lisp
;; quick jump in a screen
(use-package ace-jump-mode 
  :bind ("C-." . ace-jump-mode))
#+END_SRC

* Editing
#+BEGIN_SRC emacs-lisp
;; Auto completion
(use-package company
  :config
  (global-company-mode))

(global-set-key (kbd "M-/") 'hippie-expand)

;; Lisp-friendly hippie expand
(setq hippie-expand-try-functions-list
      '(try-expand-dabbrev
        try-expand-dabbrev-all-buffers
        try-expand-dabbrev-from-kill
        try-complete-lisp-symbol-partially
        try-complete-lisp-symbol))

;; Highlights matching parenthesis
(show-paren-mode 1)

;; Interactive search key bindings. By default, C-s runs
;; isearch-forward, so this swaps the bindings.
(global-set-key (kbd "C-s") 'isearch-forward-regexp)
(global-set-key (kbd "C-r") 'isearch-backward-regexp)
(global-set-key (kbd "C-M-s") 'isearch-forward)
(global-set-key (kbd "C-M-r") 'isearch-backward)

;; Don't use hard tabs
(setq-default indent-tabs-mode nil)

;; When you visit a file, point goes to the last place where it
;; was when you previously visited the same file.
;; http://www.emacswiki.org/emacs/SavePlace
(require 'saveplace)
(setq-default save-place t)
;; keep track of saved places in ~/.emacs.d/places
(setq save-place-file (concat user-emacs-directory "places"))

;; comments
(defun toggle-comment-on-line ()
  "comment or uncomment current line"
  (interactive)
  (comment-or-uncomment-region (line-beginning-position) (line-end-position)))
(global-set-key (kbd "C-;") 'toggle-comment-on-line)

;; use 2 spaces for tabs
(defun die-tabs ()
  (interactive)
  (set-variable 'tab-width 2)
  (mark-whole-buffer)
  (untabify (region-beginning) (region-end))
  (keyboard-quit))

;; fix weird os x kill error
(defun ns-get-pasteboard ()
  "Returns the value of the pasteboard, or nil for unsupported formats."
  (condition-case nil
      (ns-get-selection-internal 'CLIPBOARD)
    (quit nil)))

(setq electric-indent-mode nil)
#+END_SRC

* Elisp (paredit, eldoc)
** paredit
;; Automatically load paredit when editing a lisp file
;; More at http://www.emacswiki.org/emacs/ParEdit

#+BEGIN_SRC emacs-lisp
(use-package paredit
  :commands enable-paredit-mode
  :init
  (add-hook 'emacs-lisp-mode-hook       #'enable-paredit-mode)
  (add-hook 'eval-expression-minibuffer-setup-hook #'enable-paredit-mode)
  (add-hook 'ielm-mode-hook             #'enable-paredit-mode)
  (add-hook 'lisp-mode-hook             #'enable-paredit-mode)
  (add-hook 'lisp-interaction-mode-hook #'enable-paredit-mode)
  (add-hook 'scheme-mode-hook           #'enable-paredit-mode)
  :config
  (autoload 'enable-paredit-mode "paredit" "Turn on pseudo-structural editing of Lisp code." t))
#+END_SRC

** eldoc-mode
;; eldoc-mode shows documentation in the minibuffer when writing code
;; http://www.emacswiki.org/emacs/ElDoc
#+BEGIN_SRC emacs-lisp
(add-hook 'emacs-lisp-mode-hook 'eldoc-mode)
(add-hook 'lisp-interaction-mode-hook 'eldoc-mode)
(add-hook 'ielm-mode-hook 'eldoc-mode)
#+END_SRC

* Clojure (clojure-mode, cider, rainbow-delimeters)
** clojure
#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
  :commands rainbow-delimiters-mode)

(use-package clojure-mode
  :commands clojure-mode
  :init
  ;; Enable paredit for Clojure
  (add-hook 'clojure-mode-hook #'enable-paredit-mode)
  ;; This is useful for working with camel-case tokens (e.g. JavaClassName)
  (add-hook 'clojure-mode-hook #'subword-mode)
  (add-hook 'clojure-mode-hook #'rainbow-delimiters-mode)
  ;(add-hook 'clojure-mode-hook #'inf-clojure-minor-mode)
  ;; syntax hilighting for midje
  (add-hook 'clojure-mode-hook
            (lambda ()
              (setq inferior-lisp-program "lein repl")
              (font-lock-add-keywords
              nil
              '(("(\\(facts?\\)"
                (1 font-lock-keyword-face))
                ("(\\(background?\\)"
                (1 font-lock-keyword-face))))
                (define-clojure-indent (fact 1))
                (define-clojure-indent (facts 1))))
  :config
  (use-package clojure-mode-extra-font-locking))
#+END_SRC

** cider
#+BEGIN_SRC emacs-lisp
(use-package cider
  :commands cider-jack-in
  :init
  ;; auto completion
  (add-hook 'cider-repl-mode-hook #'company-mode)
  (add-hook 'cider-mode-hook #'company-mode)
  ;; provides minibuffer documentation for the code you're typing into the repl
  (add-hook 'cider-mode-hook 'eldoc-mode)
  ;; enable paredit in your REPL
  (add-hook 'cider-repl-mode-hook 'paredit-mode)
  ;; go right to the REPL buffer when it's finished connecting
  (setq cider-repl-pop-to-buffer-on-connect t)
  ;; When there's a cider error, show its buffer and switch to it
  (setq cider-show-error-buffer t)
  (setq cider-auto-select-error-buffer t)
  ;; Where to store the cider history.
  (setq cider-repl-history-file "~/.emacs.d/cider-history")
  ;; Wrap when navigating history.
  (setq cider-repl-wrap-history t)
  ;; Use clojure mode for other extensions
  (add-to-list 'auto-mode-alist '("\\.edn$" . clojure-mode))
  (add-to-list 'auto-mode-alist '("\\.boot$" . clojure-mode))
  ;;(add-to-list 'auto-mode-alist '("\\.cljs.*$" . clojure-mode))
  (add-to-list 'auto-mode-alist '("lein-env" . enh-ruby-mode)))
#+END_SRC

* Web development (tagedit, emmet-mode, web-mode)
#+BEGIN_SRC emacs-lisp
;; edit html like sexps
(use-package tagedit
  :commands (tagedit-mode tagedit-add-paredit-like-keybindings))

(use-package emmet-mode
  :init
  (add-hook 'clojure-mode-hook 'emmet-mode)
  (add-hook 'sgml-mode-hook 'emmet-mode)
  (add-hook 'css-mode-hook 'emmet-mode))

(use-package web-mode
  :init 
  (add-to-list 'auto-mode-alist '("\\.php\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.scss\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.css\\'" . web-mode))
  (setq web-mode-markup-indent-offset 2)
  (setq web-mode-css-indent-offset 2)
  (setq web-mode-code-indent-offset 2)

  ;; Enable line numbers
  ;; set type of line numbering (global variable)
  (setq display-line-numbers-type 'relative) 

  ;; activate line numbering in all buffers/modes
  (global-display-line-numbers-mode)

  ;; change spacing at top of buffer
  (add-to-list 'default-frame-alist '(internal-border-width . 7)))

;; javascript / html
(add-to-list 'auto-mode-alist '("\\.js$" . js-mode))
(add-hook 'js-mode-hook 'subword-mode)
(add-hook 'html-mode-hook 'subword-mode)
(setq js-indent-level 2)
(eval-after-load "sgml-mode"
  '(progn
     (tagedit-add-paredit-like-keybindings)
     (add-hook 'html-mode-hook (lambda () (tagedit-mode 1)))))
#+END_SRC

* AUCTeX
#+BEGIN_SRC emacs-lisp
(use-package tex
  :ensure auctex
  :init
  (add-hook 'LaTeX-mode-hook #'diatheke-mode)
  (setq-default TeX-engine 'xetex)
  (setq TeX-PDF-mode t)
  (setq TeX-source-correlate-mode t)
  (setq TeX-source-correlate-method '((pdf . synctex)))
  (setq TeX-view-program-selection '((output-pdf "PDF Viewer")))
  ;(setq TeXV-view-program-list
  ;     '(("PDF Viewer" "C:/Users/jinair/AppData/Local/SumatraPDF/SumatraPdf.exe mode-io-correlate -forward-search %b %n %o")))
  (eval-after-load "tex"
    '(add-to-list 'TeX-expand-list '("%a" (lambda nil (expand-file-name (buffer-file-name))))))
  (setq TeXV-view-program-list
       '(("PDF Viewer" ("okular --unique %o" (mode-io-correlate "#src:%n%a")))))
  (setenv "PATH" (concat "/Library/TeX/texbin" ":" (getenv "PATH")))

  (add-hook 'LaTeX-mode-hook
            (lambda()
              (add-to-list 'TeX-command-list
                           '("XeLaTeX" "%`xelatex%(mode)%' %t" TeX-run-TeX nil t))
              (setq TeX-command-default "XeLaTeX")
              (setq TeX-save-query nil)
              (setq TeX-show-compilation t)))

  (add-hook 'LaTeX-mode-hook #'diatheke-mode))
#+END_SRC

* Org-mode
#+BEGIN_SRC emacs-lisp
(use-package org-bullets)

(use-package ox-reveal)

(use-package org
  :bind (("C-c l" . org-store-link)
         ("C-c a" . org-agenda)
         ("C-c c" . org-capture)
         ("C-c b" . org-iswitchb))
  :init
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
  (setq org-reveal-root "file:///home/hohyun/projects/reveal.js")

  (setq org-log-done t)
  (setq org-directory "~/org")
  (setq org-agenda-files 
        (list "~/org/work.org"
              "~/org/home.org"
              "~/org/faith.org"))
  (setq org-default-notes-file "~/org/taskdiary.org")

  (setq org-src-fontify-natively t
        org-src-tab-acts-natively t
        org-confirm-babel-evaluate nil
        org-edit-src-content-indentation 0)

  (setq org-capture-templates
    '(("a" "Appointment" entry (file+headling "~/org/taskdiary.org" "Calendar")
       "* APPT %^{Description} %^g
       %?
       Added: %U")
      ("n" "Notes" entry (file+datetree "~/org/taskdiary.org")
       "* %^{Description} %^g 
       %?
       Added: %U")
      ("t" "Tast Diary" entry (file+datetree "~/org/taskdiary.org")
       "* TODO %^{Description} %^g 
       %?
       Added: %U")
      ("j" "Journal" entry (file+datetree "~/org/journal.org")
       "** %^{Heading}")
      ("l" "Log Time" entry (file+datetree "~/org/timelog.org")
       "** %U - %^{Activity} :TIME:")))

  (defun +org/opened-buffer-files ()
    "Return the list of files currently opened in emacs"
    (delq nil
          (mapcar (lambda (x)
                    (if (and (buffer-file-name x)
                             (string-match "\\.org$"
                                           (buffer-file-name x)))
                        (buffer-file-name x)))
                    (buffer-list))))

  (setq org-refile-targets '((+org/opened-buffer-files :maxlevel . 9)))
  (setq org-refile-use-outline-path 'file)
    
  ;; makes org-refile outline working with helm/ivy
  (setq org-outline-path-complete-in-steps nil)
  (setq org-refile-allow-creating-parent-nodes 'confirm)

  :config
    ;;(use-package org-bullets)
)
#+END_SRC

* Magit
#+BEGIN_SRC emacs-lisp
;; git integration
(use-package magit
  :pin melpa-stable
  :bind ("C-x g" . magit-status))
#+END_SRC

* Ledger mode
#+BEGIN_SRC emacs-lisp
  (use-package ledger-mode
    :defer t
    :mode ("\\.ledger$" "\\.dat$"))
#+END_SRC

* Rust
#+BEGIN_SRC emacs-lisp
(use-package rust-mode)

(use-package cargo
  :hook 
  (rust-mode . cargo-minor-mode))

(use-package racer
  :ensure rust-mode

  :init
  (setq racer-cmd "c:/Users/jinair/.cargo/bin/racer")
  (setq racer-rust-src-path "C:/Users/jinair/.rustup/toolchains/stable-x86_64-pc-windows-msvc/lib/rustlib/src/rust/src")
  (setq company-tooltip-align-annotations t)

  :hook
  (rust-mode . racer-mode)
  (racer-mode . eldoc-mode)
  (racer-mode . company-mode))

#+END_SRC

* GoLang
#+BEGIN_SRC emacs-lisp
(use-package go-mode)

(use-package lsp-mode
  :hook (go-mode . lsp-deferred))
#+END_SRC

* Haskell
#+BEGIN_SRC emacs-lisp
(use-package hindent
  :hook
  (haskell-mode . hindent-mode))

(use-package haskell-mode
  :init
  (custom-set-variables
   '(haskell-stylish-on-save t)
   '(haskell-process-suggest-remove-import-lines t)
   '(haskell-process-auto-import-loaded-module t)
   '(haskell-process-log t)
   '(haskell-process-type 'stack-ghci))

  (add-hook 'haskell-mode-hook  
            (lambda ()
              (set (make-local-variable 'company-backends)
                   (append '((company-capf company-dabbrev-code))
                           company-backends))))
  :hook
  (haskell-mode . haskell-auto-insert-module-template)
  (haskell-mode . haskell-collapse-mode)

  :bind
  (("C-`" . haskell-interactive-bring)
   ("C-c C-l" . haskell-process-load-or-reload)
   ("C-c C-c" . haskell-process-cabal-build)
   ("C-c c" . haskell-process-cabal)))
#+END_SRC
